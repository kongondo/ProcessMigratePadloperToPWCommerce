<?php

namespace ProcessWire;

/**
 * Migrate Padloper To PWCommerce: Process.
 *
 * Helper Process Module for migrating Padloper to ProcessWire Commerce.
 * Displays the dashboard for accessing the migration script in the ProcessWire Admin.
 *
 * @author Francis Otieno (Kongondo) <kongondo@gmail.com> kongondo.com
 *
 *
 *
 * ProcessMigratePadloperToPWCommerce for ProcessWire Commerce, ProcessWire
 * Copyright (C) 2025 by Francis Otieno
 * MIT License
 *
 */




class ProcessMigratePadloperToPWCommerce extends Process implements Module {

    private    const PAGE_NAME = 'migrate-padloper-to-pwcommerce';
    private    const PAGE_TITLE = 'Migrate Padloper to PWCommerce';
    private    const MIGRATION_SESSION_NAME = 'pwcommerce-migration';


    public static function getModuleInfo() {

        $moduleInfo =

            [
                'title' => __('Migrate Padloper to ProcessWire Commerce', __FILE__),
                'summary' => __('Module to help migrate Padloper to ProcessWire Commerce', __FILE__),
                'author' => 'Francis Otieno (Kongondo)',
                'version' => "001",
                'href' => 'http://kongondo.com',
                // non-supusers need this permission before ProcessWire will load this module
                'permission' => 'pwcommerce-migrate',
                'singular' => true,
                'requires' => [
                    'PHP>=8.2.0',
                    'ProcessWire>=3.0.200'
                ],
                // Array of permissions that ProcessWire will install (and uninstall) automatically. Permissions should be in the format: array('permission-name' => 'Permission description').
                'permissions' => [
                    'pwcommerce-migrate' => __('Permission to use Migrate Padloper to ProcessWire Commerce admin.', __FILE__),
                ],

            ];



        // ------
        return $moduleInfo;
    }

    public function __construct() {
        parent::__construct();
    }

    public function init() {
        parent::init();
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ EXECUTES  ~~~~~~~~~~~~~~~~~~

    public function execute() {

        $this->headline($this->_("Migrate Padloper to ProcessWire Commerce"));

        $out = "<h3>" .
            $this->_('Important Read')
            . "</h3>";
        $out .= "<p>" .

            $this->_("This tool will migrate your Padloper shop to ProcessWire Commerce shop. Please carefully read and action the following notes!") .

            "</p>";

        // -----
        // NOTES
        $out .= $this->renderNotes();

        // #########

        $errors = $this->runChecks();
        if (!empty($errors)) {
            $out .= "<h3>" .
                $this->_('Error Encountered')
                . "</h3>";
            $out .= "Migration cannot work due to the following errors: {$errors}";
        } else {
            // GOOD TO GO
            // set session
            $this->setMigrationSession();
            // render get started button
            $out .= $this->renderStartMigration();
        }

        //--------------------
        return $out;
    }

    public function executeGetStarted() {
        $this->headline($this->_("Get Started"));
        // TODO CHECK IF MIGRATION SESSION IS ON!
        if (empty($this->isMigrationSessionValid())) {
            $error = $this->_('Invalid Migration Session');
            $this->error($error);
            $this->session->redirect($this->page->url);
        };
        $out = "<p>GET STARTED!</p>";
        return $out;
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ VALIDATORS  ~~~~~~~~~~~~~~~~~~

    private function isInstalledModule($class) {
        return $this->wire('modules')->isInstalled($class);
    }

    private function isMigrationSessionValid() {
        $isValidMigrationSession = true;
        // check if session is set
        // check if session set is longer than 1 hour 
        // TODO  time ok?
        $migrationSession = $this->getMigrationSession();
        bd($migrationSession, __METHOD__ . ': $migrationSession - at line #' . __LINE__);


        if (empty($migrationSession)) {
            $isValidMigrationSession = false;
        } elseif (!empty($this->isStaleMigrationSession())) {
            $isValidMigrationSession = false;
        }

        return $isValidMigrationSession;
    }

    private function isStaleMigrationSession() {
        // NOTE TIMESTAMP
        $migrationSession = (int)$this->getMigrationSession();
        $currentTime = time();
        // stale session is one that is more than 1 hour old
        $isStaleSession = $currentTime - $migrationSession > 3600;
        bd($migrationSession, __METHOD__ . ': $migrationSession - at line #' . __LINE__);
        bd($currentTime, __METHOD__ . ': $currentTime - at line #' . __LINE__);
        bd($isStaleSession, __METHOD__ . ': $isStaleSession - at line #' . __LINE__);
        return $isStaleSession;
    }

    private function runChecks() {
        $errorsArray = $this->getErrors();
        $errorsString = "";
        if (!empty($errorsArray)) {
            $errorsString = implode(", ", $errorsArray);
        }
        return $errorsString;
    }

    private function getErrors() {

        $errors = [];

        $padloperClass = 'Padloper';
        $pwCommerceClass = 'PwCommerce';


        // is padloper installed
        if (empty($this->isInstalledModule($padloperClass))) {
            $errors[] = $this->_('Padloper install not found!');
        }
        // is pwcommerce installed
        if (empty($this->isInstalledModule($pwCommerceClass))) {
            $errors[] = $this->_('ProcessWire Commerce install not found!');
        }
        $errors = [];

        bd($errors, __METHOD__ . ': $errors - at line #' . __LINE__);
        return $errors;
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SESSION  ~~~~~~~~~~~~~~~~~~

    private function setMigrationSession() {
        // TODO IF WE ALREADY HAVE A SESSION AND IT IS NOT MORE THAN 1 HOUR LONG? WE REUSE IT
        if (!empty($this->isStaleMigrationSession())) {
            $this->session->set(self::MIGRATION_SESSION_NAME, time());
        }
    }

    private function getMigrationSession() {
        $migrationSession = $this->session->get(self::MIGRATION_SESSION_NAME);
        return $migrationSession;
    }

    private function removeMigrationSession() {
        $this->session->remove(self::MIGRATION_SESSION_NAME);
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GETTERS  ~~~~~~~~~~~~~~~~~~

    private function getPadloperPages() {
    }
    private function getPadloperTemplates() {
    }
    private function getPadloperTemplateFiles() {
    }
    private function getPadloperTemplatePartials() {
    }
    private function getPadloperFields() {
    }
    private function getPadloperAssets() {
    }



    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ NOTES  ~~~~~~~~~~~~~~~~~~

    private function renderNotes() {
        $out = "<ol>";
        foreach ($this->getNotes() as $note) {
            $out .= "<li>{$note}</li>";
        }
        $out .= "</ol>";
        return $out;
    }

    private function getNotes() {
        $notes = [
            $this->_('Usage of this tool is at your own risk.'),
            $this->_('Create a whole backup of your site before getting started.'),
            $this->_('Preferably, test on test server.'),
            $this->_('If the tests pass, it is still advisable to create a duplicate of your production site, run the migration there, create a database dump of the migrated site and use that to update your real production site.'),
            $this->_('Do not uninstall Padloper until after this script has finished successfully. Doing so will delete all your Padloper pages!'),
        ];
        return $notes;
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MISC  ~~~~~~~~~~~~~~~~~~

    private function renderStartMigration() {

        $out = "<h3>" .
            $this->_('Get Started')
            . "</h3>";

        $href = $this->page->url . "get-started/";
        bd($href, __METHOD__ . ': $href - at line #' . __LINE__);
        $options = [
            'name' => 'pwmigrate_get_started',
            'label' => $this->_('Get Started'),
            'type' => 'button',
            'href' => $href,
        ];
        $field = $this->getButton($options);
        $out .= $field->render();
        return $out;
    }

    private function getButton($options) {

        /** @var InputfieldButton $field */
        $field = $this->wire('modules')->get('InputfieldButton');
        $type = !empty($options['type']) ? $options['type'] : 'button';

        $field->attr([
            'name' => $options['name'],
            'label' => $options['label'],
            'type' => $type,

        ]);


        if (!empty($options['href'])) {
            $field->attr('href', $options['href']);
        }

        return $field;
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MIGRATORS  ~~~~~~~~~~~~~~~~~~

    private function actionMigratePages() {
    }
    private function actionMigrateTemplates() {
    }
    private function actionMigrateTemplateFiles() {
    }
    private function actionMigrateTemplatePartials() {
    }
    private function actionMigrateFields() {
    }
    private function actionMigrateAssets() {
    }


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ INSTALL  ~~~~~~~~~~~~~~~~~~

    public function ___install() {

        // check if there is another page in admin with the name 'shop'. If so, abort installation
        if ($this->installerOurModulePageAlreadyExists()) {
            throw new WireException($this->_("Process PWCommerce: Installation aborted. A page with the name 'shop' already exists. This module needs that name. Please fix this then retry."));
        }

        // PWCOMMERCE PROCESS MODULE ADMIN PAGE
        // create the page for this module (ProcessMigratePadloperToPWCommerce)
        // it needs to use the template admin and it needs to have this module as its process
        $page = new Page();
        $page->template = 'admin';
        $page->parent = $this->wire('pages')->get($this->wire('config')->adminRootPageID);
        $page->title = self::PAGE_TITLE;
        $page->name = self::PAGE_NAME;
        $page->process = $this;
        $page->save();
        // -------------



        // -------
        // tell the user we created the page for this module
        $this->message("Process MigratePadloperToPWCommerce: Created page {$page->path}");
    }

    public function ___uninstall() {
        // find and delete the page we installed, locating it by the process field (which has the module ID)
        // it would probably be sufficient just to locate by name, but this is just to be extra sure.
        $moduleID = $this->wire('modules')->getModuleID($this);
        $page = $this->wire('pages')->get("template=admin, process=$moduleID, name=" . self::PAGE_NAME);
        // $page = $this->wire('pages')->get('template=admin, name='.self::PAGE_NAME);
        if ($page->id) {
            // if we found the page, let the user know and delete it
            $this->message($this->_('Process MigratePadloperToPWCommerce: Deleted page ') . $page->path);
            // @note: delete any child pages as well
            $this->wire('pages')->delete($page, true);
        }
    }

    private function installerOurModulePageAlreadyExists() {
        $isPageExist = false;
        // check if our process module's page already exists in Admin
        $parent = $this->wire('pages')->get($this->wire('config')->adminRootPageID);
        $page = $this->wire('pages')->get("parent=$parent, template=admin, include=all, name=" . self::PAGE_NAME);
        if ($page->id && $page->id > 0) {
            $isPageExist = true;
        }

        return $isPageExist;
    }
}
